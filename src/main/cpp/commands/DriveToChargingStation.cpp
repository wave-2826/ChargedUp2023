// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

#include "commands/DriveToChargingStation.h"
#include "commands/WaveWaitCommand.h"
#include "frc2/command/PIDSubsystem.h"
#include "Globals.h"

DriveToChargingStation::DriveToChargingStation(SwerveDrive* swerveDrive)
                      : m_swerveDrive(swerveDrive)
{

    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("DriveToChargingStation");
    // m_timeout = timeout;
}

// Called just before this Command runs the first time
void DriveToChargingStation::Initialize() {
    // WaitCommand::Initialize();
    m_balanceState = Before_Balance;
    m_isTilted = false;
    while (!m_swerveDrive->InitialSwerve());
}

// Called repeatedly when this Command is scheduled to run
void DriveToChargingStation::Execute() {

    double robotPitch = m_swerveDrive->GetRobotPitch();
    std::cout << "PITCH: " << robotPitch << std::endl;

    switch(m_balanceState) {
        case Before_Balance:
            // CASE: before charging station ramp
            // drive straight            
            if (robotPitch < -2.0) {
                m_balanceState = Tilted_Up;
            }
            m_swerveDrive->DrivePods(0*m_markiplier, 0.3*m_markiplier, 0*m_markiplier, nullptr);
            std::cout << "BEFORE BALANCE" << std::endl;
            break;
        case Tilted_Up:
            // CASE: tilted driving up station
            // pitch is negative - end state
            std::cout << "TILTED UP" << std::endl;
            m_isTilted = true;
        default:
            break;
    }
}

// Make this return true when this Command no longer needs to run execute()
bool DriveToChargingStation::IsFinished() {
    // m_swerveDrive->DrivePods(0, 0, 0);
    // return false;
    std::cout << "IS FINISHED: " << m_isTilted << std::endl;
    if (m_isTilted) {
        m_swerveDrive->DrivePods(0, 0, 0, nullptr);
    }
    return m_isTilted;
}

// Called once after isFinished returns true
void DriveToChargingStation::End(bool interrupted) {
    // WaitCommand::End(interrupted);
    m_swerveDrive->DrivePods(0, 0, 0, nullptr);
}

bool DriveToChargingStation::RunsWhenDisabled() const {
    return false;

}

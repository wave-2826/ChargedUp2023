// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

#include "commands/AutoBalance.h"
#include "commands/WaveWaitCommand.h"
#include "Globals.h"

AutoBalance::AutoBalance(SwerveDrive* swerveDrive)
                      : m_swerveDrive(swerveDrive)
{

    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(m_Subsystem);
    SetName("AutoBalance");
    // m_timeout = timeout;
}

// Called just before this Command runs the first time
void AutoBalance::Initialize() {
    // WaitCommand::Initialize();
    m_balanceState = Before_Balance;
    m_isBalanced = false;
    // while (!m_swerveDrive->InitialSwerve());
}

// Called repeatedly when this Command is scheduled to run
void AutoBalance::Execute() {
    // m_swerveDrive->DrivePods(m_inputLX, m_inputLY, m_inputRX);

    double robotPitch = m_swerveDrive->GetRobotPitch();
    std::cout << "PITCH: " << robotPitch << std::endl;
    double averagePitchOld = 0;
    double averagePitchNew = 0;

    switch(m_balanceState) {
        case Before_Balance:
            // CASE: before charging station ramp
            // drive straight            
            if (robotPitch < -2.0) {
                m_balanceState = Tilted_Up;
            }
            m_swerveDrive->DrivePods(0*m_markiplier, 0.3*m_markiplier, 0*m_markiplier, nullptr);
            std::cout << "BEFORE BALANCE" << std::endl;
            break;
        case Tilted_Up:
            // CASE: tilted driving up station
            // pitch is negative - keep driving straight
            for (int i = 0; i < (int)previousPitches.size(); i++)
            {
                if (i < (int)previousPitches.size()/2)
                    averagePitchOld += previousPitches[i];
                else
                    averagePitchNew += previousPitches[i];
            }
            averagePitchOld /= (double)previousPitches.size();
            averagePitchNew /= (double)previousPitches.size();
            if (averagePitchNew - averagePitchOld > 0.1) {
                m_balanceState = Level_Balance;
            }
            m_swerveDrive->DrivePods(0*m_markiplier, 0.3*m_markiplier, 0*m_markiplier, nullptr);
            
            std::cout << "TILTED UP" << std::endl;
            previousPitches.insert(previousPitches.begin(), robotPitch);
            if (previousPitches.size() > 10){
                previousPitches.pop_back();
            }
            break;
        case Tilted_Down:
            // CASE: tilted driving down station
            // pitch is positive - reverse, reverse!!
            if (fabs(robotPitch) <= 2.0) {
                m_balanceState = Level_Balance;
            } else if (robotPitch < -2.0) {
                m_balanceState = Tilted_Up;
            }
            m_swerveDrive->DrivePods(0*m_markiplier, -0.2*m_markiplier, 0*m_markiplier, nullptr);
            std::cout << "TILTED DOWN" << std::endl;
            break;
        case Level_Balance:
            // CASE: balanced on station
            // stay put + end auto
            m_swerveDrive->DrivePods(0*m_markiplier, 0*m_markiplier, 0*m_markiplier, nullptr);
            if (robotPitch < -2.0) {
                m_balanceState = Tilted_Up;
            } else if (robotPitch > 2.0) {
                m_balanceState = Tilted_Down;
            } else {
                m_swerveDrive->LockSwerve();
                m_isBalanced = true;
            }            
            std::cout << "LEVEL BALANCE" << std::endl;
            break;
        default:
            break;
    }
}

// Make this return true when this Command no longer needs to run execute()
bool AutoBalance::IsFinished() {
    // m_swerveDrive->DrivePods(0, 0, 0);
    // return false;
    std::cout << "IS FINISHED: " << m_isBalanced << std::endl;
    if (m_isBalanced) {
        m_swerveDrive->DrivePods(0, 0, 0, nullptr);
    }
    return m_isBalanced;
}

// Called once after isFinished returns true
void AutoBalance::End(bool interrupted) {
    // WaitCommand::End(interrupted);
    m_swerveDrive->DrivePods(0, 0, 0, nullptr);
}

bool AutoBalance::RunsWhenDisabled() const {
    return false;

}

// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

#include "subsystems/Intake.h"
#include "RobotContainer.h"
#include <frc/smartdashboard/SmartDashboard.h>

/**
 * Intake subsystem implementation
 *
 * @author 2826WaveRobotics
 */
Intake::Intake()
{
    SetName("Intake");
    SetSubsystem("Intake");

    m_intakeLeftDeployMotor = new rev::CANSparkMax(k_intakeLeftDeployMotor, rev::CANSparkMaxLowLevel::MotorType::kBrushless);
    m_intakeRightDeployMotor = new rev::CANSparkMax(k_intakeRightDeployMotor, rev::CANSparkMaxLowLevel::MotorType::kBrushless);
    m_intakeRollerMotor = new rev::CANSparkMax(k_intakeRollerMotor, rev::CANSparkMaxLowLevel::MotorType::kBrushless);

    m_intakeRightDeployMotor->SetInverted(true);
}

// Initializers
void Intake::Initialize() 
{
    m_operatorJoystick = RobotContainer::GetInstance()->getOperator();
}

// Put code here to be run every loop
void Intake::Periodic() {}

// This method will be called once per scheduler run when in simulation
void Intake::SimulationPeriodic() {}

// intake funtions
void Intake::moveIntake(double speed)
{
    m_intakeLeftDeployMotor->Set(speed);
    m_intakeRightDeployMotor->Set(speed);
}

void Intake::setIntakeRollerMotorSpeed(double speed)
{
    m_intakeRollerMotor->Set(speed);
}

void Intake::runIntake() 
{
    // intake rollers
    double intakeRollerSpeedInput = m_operatorJoystick->GetLeftTriggerAxis();
    double intakeRollerSpeed = 0;
    if(fabs(intakeRollerSpeedInput) > k_jsDeadband)
    {
        intakeRollerSpeed = intakeRollerSpeedInput;
    }
    // set intake roller speed
    setIntakeRollerMotorSpeed(intakeRollerSpeed);

    // intake stow/deploy
    if (m_operatorJoystick->GetLeftStickButton())
    {
        // deploy
        moveIntake(0.5);
    }
    else if (m_operatorJoystick->GetLeftStickButton() && m_operatorJoystick->GetBackButton())
    {
        // stow
        moveIntake(0.5);
    }
    else
    {
        // stop
        moveIntake(0.0);
    }

}
